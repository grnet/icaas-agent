#!/bin/bash
#
# Copyright (C) 2015 GRNET S.A.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e


usage() {
    local rc="$1"

    cat <<EOF

Usage: $0 [options] <manifest>

Create an image and register it with a synnefo deployment according to the
specifications found in the manifest file.

OPTIONS:
    -l LOGFILE
        Log the output to this file

    -h Print this message

EOF

    exit "$rc"
}

error() { echo "$(date) [ERROR] $@" >&2; exit 1; }
warn() { echo "$(date) [WARNING] $@" >&2; }
info() { echo "$(date) [INFO] $@" >&2; }


while getopts "l:h" opt; do
    case $opt in
        l) LOGFILE="$OPTARG"
            ;;
        h) usage 0
            ;;
        ?) usage 1
            ;;
    esac
done

shift $((OPTIND-1))

if [ -z "$1" ]; then
    echo -e "Manifest missing." >&2
    usage 2
fi

MANIFEST="$1"

if [ -f "$MANIFEST" ]; then
    source "$MANIFEST"
else
   echo "Manifest file: \`$MANIFEST' does not exist. Type $0 -h for help"
   exit 3
fi

if [ "$LOGFILE" != "" ]; then
    # Redirect everything the $LOGFILE
    exec >$LOGFILE 2>&1
fi

report_error() {
    local args=""
    trap - ERR

    if [ "ICAAS_SERVICE_IGNORE_SSL_ERRORS" = "True" ]; then
        args+="-k"
    fi
    curl $args -X PUT -H "Content-type: application/json" -d '{"status": "ERROR", "reason": "See log for more info"}' "$ICAAS_SERVICE_STATUS"
}

trap report_error ERR

info "Starting Image Creator as a Service"

FILENAME=$(basename "$ICAAS_IMAGE_URL")
BASENAME=$(basename "$ICAAS_IMAGE_URL" .zip)
if [[ ! "$FILENAME" =~ ^bitnami-[A-Za-z0-9.-]+\.zip ]]; then
    error "$FILENAME is not a bitnami image"
fi

CONTAINER=${ICAAS_IMAGE_OBJECT%/*}
OBJECT=${ICAAS_IMAGE_OBJECT#*/}

info "Downloading image from: $ICAAS_IMAGE_URL"
curl -L "$ICAAS_IMAGE_URL" > "/var/tmp/$FILENAME"

info "Unpacking zip file"
cd /var/tmp;
rm -rf /var/tmp/$BASENAME;
unzip -o -u /var/tmp/$FILENAME;
rm -f "!$";
cd -

IMAGE=/var/tmp/$BASENAME/$BASENAME.vmdk

info "Creating image with snf-image-creator"

if [ "$ICAAS_IMAGE_PUBLIC" = "True" ]; then
    public="--public"
fi

snf-mkimage $public -u "$OBJECT" -a "$ICAAS_SERVICE_URL" -t "$ICAAS_SERVICE_TOKEN" \
    -r "$ICAAS_IMAGE_NAME" --container "$CONTAINER" -m DESCRIPTION="$ICAAS_IMAGE_DESCRIPTION" "$IMAGE"

info "Image Creator as a Service finished"

# Report success
curl -X PUT -H "Content-type: application/json" -d '{"status": "COMPLETED"}' "$ICAAS_SERVICE_STATUS"

# vim: set sta sts=4 shiftwidth=4 sw=4 et ai :

